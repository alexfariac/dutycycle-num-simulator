using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assimetric_RPC.Methods
{
    internal class BlockDesign : ScheduleMethod
    {
        public override string Name { get; }

        public override List<bool> Schedule { get; }

        public override double DutyCyclePerc { get; }

        public override int ScheduleSize { get; }

        public override int ActiveSlotsCount { get; }

        public override List<int> ActiveSlots { get; }

        public override List<int> NextActiveSlots { get; }

        private readonly Dictionary<int, List<int>> BDsActiveSlots = new()
        {
            { 7, new List<int>() { 0, 1, 3 } },
            { 21, new List<int>() { 0, 3, 4, 9, 11 } },
            { 91, new List<int>() { 0, 2, 6, 7, 18, 21, 31, 54, 63, 71, } },
            { 381, new List<int>() { 0, 1, 19, 28, 96, 118, 151, 153, 176, 202, 240, 254, 290, 296, 300, 307, 337, 361, 366, 369, } },
            { 2451, new List<int>() { 0, 1, 36, 88, 105, 111, 256, 475, 594, 624, 636, 665, 690, 733, 757, 819, 857, 956, 1017, 1037, 1193, 1241, 1249, 1323, 1339, 1372, 1566, 1598, 1612, 1649, 1651, 1767, 1771, 1776, 1860, 1879, 1919, 2045, 2063, 2066, 2076, 2110, 2121, 2136, 2216, 2238, 2310, 2317, 2374, 2424 } },
            { 10303, new List<int>() { 0, 1, 261, 421, 699, 1094, 1257, 1399, 1685, 1690, 1783, 1790, 1884, 1952, 2137, 2251, 2416, 2422, 2468, 2596, 2931, 2997, 3092, 3178, 3323, 3337, 3368, 3505, 3541, 3612, 3632, 3640, 3720, 3779, 3930, 4210, 4334, 4444, 4570, 4728, 4950, 4963, 4985, 5104, 5336, 5373, 5445, 5486, 5669, 5693, 5990, 6138, 6340, 6343, 6404, 6540, 6595, 6613, 6662, 6715, 6759, 6791, 6943, 7120, 7159, 7189, 7199, 7422, 7538, 7555, 7598, 7625, 7672, 7676, 7687, 7710, 7768, 8010, 8259, 8460, 8486, 8502, 8700, 8818, 8830, 9059, 9122, 9124, 9143, 9199, 9247, 9330, 9436, 9486, 9589, 9801, 9810, 9967, 9996, 10021, 10078, 10111, } },
            { 983073, new List<int> { 0, 1, 230, 1757, 3926, 6457, 6571, 8907, 9075, 11283, 11416, 12349, 14193, 15323, 19916, 19998, 21969, 22530, 23730, 23972, 24680, 25171, 25759, 26146, 29797, 29956, 30409, 30787, 30811, 32048, 32114, 32955, 34928, 36273, 36457, 37591, 38978, 39011, 39202, 39232, 39279, 39648, 40049, 43535, 44967, 45720, 47110, 47893, 48434, 48474, 50320, 50419, 50959, 52931, 53692, 55553, 55764, 56136, 56199, 57532, 58822, 58992, 59105, 60677, 62856, 66309, 67066, 68516, 69201, 69965, 70746, 77451, 78357, 79087, 79678, 80359, 81192, 81853, 82810, 82816, 83860, 84316, 85033, 87500, 88652, 89114, 89542, 90367, 91015, 92286, 93389, 93479, 93490, 94105, 94117, 94223, 96830, 97047, 99099, 99127, 99631, 99696, 100075, 100872, 101305, 102288, 103038, 105129, 105254, 106486, 108007, 108889, 109885, 110070, 110557, 112074, 112305, 112625, 112958, 113773, 114476, 115078, 118771, 118979, 119105, 122407, 123218, 127543, 128282, 129641, 129842, 131540, 131967, 133562, 135875, 136564, 137204, 137494, 140188, 143124, 144373, 144632, 144960, 145152, 145673, 148020, 148501, 152193, 152303, 152728, 156523, 157016, 157608, 158587, 159888, 159906, 161261, 161569, 161572, 162439, 162860, 163409, 165060, 165351, 166539, 166843, 167505, 168930, 170740, 171205, 172465, 175546, 177027, 177068, 179571, 180813, 181184, 182562, 182921, 184598, 185035, 185278, 185317, 188124, 188732, 189530, 190565, 191351, 192563, 192838, 195078, 199940, 200254, 200477, 200809, 201916, 202055, 203351, 205606, 205951, 206504, 208384, 208427, 208563, 209885, 210766, 213051, 213988, 221169, 222473, 222859, 225558, 226144, 227213, 227264, 227406, 228051, 228198, 228451, 228460, 231143, 233471, 234306, 234398, 234837, 235167, 237596, 239523, 240230, 240713, 242279, 243053, 243494, 243875, 243954, 245073, 245799, 247131, 249262, 249426, 250557, 250864, 251217, 252327, 252353, 252565, 252822, 254353, 255088, 255683, 255890, 256926, 258927, 259054, 261945, 262784, 263087, 263359, 265830, 266505, 266913, 267078, 270053, 270796, 273500, 275600, 276813, 277090, 278035, 278382, 278434, 278450, 278907, 279520, 279790, 280494, 280583, 281504, 281615, 282122, 282159, 282529, 283215, 283703, 283921, 283938, 284177, 287516, 288157, 289653, 289804, 290727, 292946, 293270, 293667, 294639, 295213, 296050, 299767, 302147, 302861, 304499, 304745, 306434, 307780, 309060, 309217, 310849, 311278, 311478, 311539, 312346, 312587, 313445, 315934, 316416, 317217, 319414, 319641, 321272, 321559, 321886, 322906, 323783, 324067, 324945, 325810, 326473, 327675, 329342, 330526, 331293, 331390, 333204, 333224, 334318, 335416, 338017, 339418, 339463, 339981, 340029, 341528, 345586, 345658, 346264, 347695, 348217, 348320, 348817, 352404, 353217, 355590, 355864, 356759, 357745, 357766, 363478, 364582, 364925, 365355, 366729, 367209, 367441, 367550, 368356, 369032, 370241, 370243, 370718, 371196, 376956, 377214, 377627, 377908, 378768, 379608, 381268, 382657, 383593, 384085, 384552, 384850, 389483, 392643, 393529, 394163, 397724, 397778, 397847, 398775, 399530, 402943, 403391, 403471, 404814, 405628, 406388, 407005, 408560, 409306, 409584, 411312, 411510, 412221, 417711, 417815, 418197, 420026, 420349, 421015, 421144, 422396, 423624, 424932, 425060, 425181, 427137, 427913, 429046, 429695, 430431, 431515, 432053, 435020, 436073, 436676, 438837, 440009, 440340, 440603, 441795, 442116, 442721, 443275, 443330, 444148, 444403, 446095, 446380, 448023, 448222, 448237, 449393, 450333, 450622, 450627, 451315, 454794, 455496, 456038, 457071, 457409, 457851, 458629, 459153, 459400, 459666, 459742, 460546, 462320, 463477, 463565, 463575, 466489, 468082, 468659, 469462, 469664, 469853, 470521, 472489, 472936, 473430, 473564, 474832, 475595, 476394, 476461, 476812, 479611, 480242, 480482, 481104, 481264, 481540, 481849, 483004, 483368, 484260, 484893, 485037, 485145, 488261, 488416, 488952, 490844, 490930, 492318, 492498, 492922, 493000, 495392, 495414, 495948, 497108, 497413, 497759, 498908, 499046, 501563, 501706, 501735, 504965, 505368, 505572, 506314, 512581, 513552, 514965, 515187, 515282, 516384, 517196, 520066, 522348, 522355, 524230, 524618, 524720, 525253, 526492, 530099, 531938, 533078, 535471, 540204, 540424, 540477, 541067, 541129, 541199, 541479, 543143, 543288, 544412, 545709, 546291, 546535, 546665, 547319, 547459, 547607, 548018, 548524, 549253, 550776, 550883, 551995, 552041, 552176, 552715, 553218, 554674, 555036, 556179, 557370, 557490, 557913, 559780, 560093, 560478, 560569, 560757, 561853, 563633, 565140, 565165, 565436, 566475, 568013, 568228, 569610, 570594, 571689, 572239, 572416, 573093, 575567, 576168, 576682, 576984, 578073, 578234, 579178, 580962, 581316, 581529, 581909, 582277, 582285, 583188, 583304, 583385, 583883, 584771, 587119, 587975, 588165, 588460, 588487, 588823, 589962, 590195, 590268, 592509, 592551, 593444, 593500, 593538, 595887, 598339, 599213, 599365, 599849, 600065, 600816, 602685, 602749, 602768, 604709, 605147, 606046, 607077, 607113, 608547, 608721, 608903, 611157, 612390, 614750, 616933, 617291, 618656, 619662, 622146, 623097, 623644, 624396, 626019, 626898, 627163, 627530, 628667, 629146, 629937, 631722, 633326, 634551, 636500, 636825, 636875, 637813, 639611, 640821, 641321, 642736, 646187, 646613, 647656, 648507, 648732, 649796, 650185, 650216, 650947, 651004, 653233, 653617, 654705, 655723, 656568, 656655, 656804, 656941, 658275, 659828, 660925, 661170, 661376, 662577, 664301, 666756, 667805, 667951, 668117, 669399, 670377, 673847, 675909, 676128, 677549, 677841, 679671, 680120, 680143, 684470, 686563, 687416, 687875, 688175, 689926, 690947, 692408, 693485, 695110, 696235, 697791, 697825, 698231, 698336, 699978, 700628, 702568, 703398, 704999, 706280, 706964, 707293, 707937, 708705, 711091, 711792, 712318, 714153, 714543, 715339, 719006, 719211, 719604, 722401, 722649, 730957, 731428, 732146, 732340, 732970, 733269, 733422, 734309, 734380, 734728, 734956, 735274, 736182, 736636, 737345, 738177, 738512, 741296, 741465, 741826, 744781, 745670, 745833, 749067, 749223, 749645, 752424, 753439, 754545, 755009, 755963, 756773, 758538, 758789, 759618, 761413, 762797, 766764, 767348, 771141, 771493, 773441, 773560, 777658, 778443, 779135, 780466, 781384, 784188, 784527, 784602, 785098, 786305, 786715, 787132, 787244, 789376, 791393, 791950, 792117, 793743, 794080, 794585, 797066, 797381, 798602, 798778, 799342, 799515, 800495, 802452, 802545, 803125, 805645, 806010, 806970, 807234, 807742, 807913, 808906, 809505, 814756, 815111, 815939, 816189, 817093, 817859, 818708, 819176, 820170, 820439, 820837, 821186, 821336, 821713, 823923, 826480, 826714, 828138, 828405, 831087, 832237, 833112, 833575, 833958, 834419, 835818, 835822, 838798, 841585, 842051, 842566, 843324, 843409, 843769, 843843, 847319, 847663, 847723, 848319, 848724, 849859, 851944, 852061, 852387, 853646, 854900, 856484, 858157, 858906, 859828, 861314, 864754, 865319, 865881, 866451, 866968, 868319, 869645, 869831, 873355, 874347, 874534, 875439, 875699, 878007, 878165, 878462, 879729, 879860, 880660, 881317, 883804, 883982, 884014, 886260, 886360, 888450, 889069, 889579, 890320, 890333, 890495, 892062, 893741, 894081, 894750, 895460, 896912, 897599, 900243, 902218, 903554, 903612, 904344, 905524, 907567, 907763, 909483, 911013, 911332, 912047, 912563, 912772, 912856, 913222, 914122, 914958, 915969, 916521, 918562, 918958, 922581, 922705, 922764, 923821, 925648, 927939, 928061, 929065, 931324, 940115, 940849, 941409, 942019, 942839, 943297, 943869, 944261, 944877, 945378, 945519, 945615, 946438, 948024, 949206, 949829, 952712, 953144, 954245, 954289, 956155, 957340, 958148, 958716, 958831, 959147, 959636, 960145, 960159, 960194, 961162, 961710, 962606, 962916, 966274, 968612, 969514, 972554, 973790, 976154, 976851, 978805, 979664, 979867, 980021, 981788, 981983, 982453, 982679 } },
        };

        // TODO: Generate active slots on run-time considering the Multiplier diffence set theorem.
        public BlockDesign(int v)
        {
            ActiveSlots = BDsActiveSlots[v];
            ActiveSlotsCount = ActiveSlots.Count;
            Name = $"{nameof(BlockDesign)}({v}, {ActiveSlotsCount}, 1)";
            ScheduleSize = v;
            Schedule = new ();

            int nextActiveSlotIndex = 0;
            int nextActiveSlotNumber = ActiveSlots[nextActiveSlotIndex];

            for (int i = 0; i < v; i++)
            {
                if (i == nextActiveSlotNumber)
                {
                    Schedule.Add(true);

                    nextActiveSlotIndex++;
                    if (nextActiveSlotIndex < ActiveSlotsCount)
                    {
                        nextActiveSlotNumber = ActiveSlots[nextActiveSlotIndex];
                    }

                }
                else
                {
                    Schedule.Add(false);
                }
            }

            NextActiveSlots = new();
            for (int i = 0; i < ScheduleSize; i++)
            {
                int nextActiveSlot = FindNextGreatestActiveSlot(i);
                int slotsToNext = nextActiveSlot - i < 0 ? ScheduleSize + nextActiveSlot - i : nextActiveSlot - i;
                NextActiveSlots.Add(slotsToNext);
            }

            DutyCyclePerc = 100.0 * ActiveSlotsCount / ScheduleSize;
        }
    }
}
